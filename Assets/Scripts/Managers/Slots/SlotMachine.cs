using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using Network.Responses;
using Network;
using Random = UnityEngine.Random;
using System.Reflection.Emit;
using OperationType = Network.Enums.OperationType;
using Network.Builders;

/// <summary>
/// Temporary code generated by ChatGPT just for testing :)
/// </summary>

public class SlotMachine : MonoBehaviour
{
    #region Public Variables
    public static event Action<UserResponse> OnStartAttack;
    #endregion

    #region Private Variables
    [SerializeField] private Button _spinButton;
    [SerializeField] private Image _slot1, _slot2, _slot3;
    [SerializeField] private Sprite[] _slotItems;
    [SerializeField] private float[] _itemWeights;
    [SerializeField] private bool _onlyHammers = false;
    private bool _isSpinning = false;
    private float _speed = 0.1f;
    private float _spinSpeed = 500f;
    private float _spinAcceleration = 10f;
    private float _minSpinSpeed = 5f;
    private float _spinTime = 10f;
    #endregion

    #region Unity Methods
    void Start()
    {
        _spinButton.onClick.AddListener(SpinButtonClick);
    }
    #endregion

    #region Spin Methods
    private Sprite GetRandomSlotItem()
    {
        float totalWeight = 0f;

        foreach (float weight in _itemWeights)
        {
            totalWeight += weight;
        }

        float randomValue = Random.Range(0f, totalWeight);

        float cumulativeProbability = 0f;

        for (int i = 0; i < _slotItems.Length; i++)
        {
            cumulativeProbability += _itemWeights[i];

            if (randomValue <= cumulativeProbability)
            {
                return _onlyHammers ? _slotItems[1] : _slotItems[i];
            }
        }

        return _slotItems[Random.Range(0, _slotItems.Length)];
    }

    private void SpinButtonClick()
    {
        if (!_isSpinning)
        {
            StartCoroutine(SpinSlots());
        }
    }

    private IEnumerator SpinSlots()
    {
        _isSpinning = true;
        float elapsedTime = 0f;

        while (elapsedTime < _spinTime)
        {
            UpdateSlotImages();
            UpdateSpinSpeed();
            RotateSlots();
            elapsedTime++;
            yield return new WaitForSeconds(_speed);
        }

        AlignSlots();
        DetermineResult();
        _isSpinning = false;
    }

    private void UpdateSlotImages()
    {
        _slot1.sprite = GetRandomSlotItem();
        _slot2.sprite = GetRandomSlotItem();
        _slot3.sprite = GetRandomSlotItem();
    }

    private void UpdateSpinSpeed()
    {
        _spinSpeed = Mathf.Max(_minSpinSpeed, _spinSpeed - _spinAcceleration * Time.deltaTime);
    }

    private void RotateSlots()
    {
        float rotationAmount = _spinSpeed * Time.deltaTime;
        _slot1.rectTransform.Rotate(Vector3.forward * rotationAmount);
        _slot2.rectTransform.Rotate(Vector3.forward * rotationAmount);
        _slot3.rectTransform.Rotate(Vector3.forward * rotationAmount);
    }

    private void AlignSlots()
    {
        _slot1.rectTransform.rotation = Quaternion.identity;
        _slot2.rectTransform.rotation = Quaternion.identity;
        _slot3.rectTransform.rotation = Quaternion.identity;
    }
    #endregion

    #region Result Methods
    private void DetermineResult()
    {
        Sprite item1 = _slot1.sprite;
        Sprite item2 = _slot2.sprite;
        Sprite item3 = _slot3.sprite;

        int multiplier = CalculateMultiplier(item1, item2, item3);

        if (item1.name == "hammer" && item2.name == "hammer" && item3.name == "hammer")
        {
            HandleHammerWin();
        }
        else if (item1.name == "bonus" && item2.name == "bonus" && item3.name == "bonus")
        {
            HandleBonusWin();
        }
        else if (multiplier > 0)
        {
            AddCoins(100 * multiplier);
        }
    }

    private int CalculateMultiplier(Sprite item1, Sprite item2, Sprite item3)
    {
        if (AllSlotsAreTheSame(item1, item2, item3))
        {
            return 5;
        }
        else if (TwoSlotsAreTheSame(item1, item2, item3))
        {
            return 2;
        }
        else if (ContainsCoin(item1, item2, item3))
        {
            return 1;
        }

        return 0;
    }

    private bool AllSlotsAreTheSame(Sprite item1, Sprite item2, Sprite item3)
    {
        return item1 == item2 && item2 == item3;
    }

    private bool TwoSlotsAreTheSame(Sprite item1, Sprite item2, Sprite item3)
    {
        return item1 == item2 || item2 == item3 || item1 == item3;
    }

    private bool ContainsCoin(Sprite item1, Sprite item2, Sprite item3)
    {
        return item1.name == "coini" || item2.name == "coini" || item3.name == "coini";
    }
    #endregion

    #region Coin Methods
    private void AddCoins(int coins)
    {
        UserRequestDataBuilder builder = new UserRequestDataBuilder(GameManager.Instance.GetLocalPlayerUsername());
        builder.AddField("Coins", OperationType.INCREASE, coins.ToString());

        NetworkManager.TrySendPlayerData(builder.Build(), GameManager.Instance.OnPlayerDataReceived, (ErrorResponse r) => Debug.Log(r.Message.ToString()));
    }
    #endregion

    #region Bonus Methods
    private void HandleHammerWin()
    {
        AddCoins(500);
        Debug.Log("You won with a hammer!");
        VillageManager.Instance.LoadRandomPlayerVillage();
    }

    private void HandleBonusWin()
    {
        AddCoins(1000);
        Debug.Log("You won a bonus!");
    }
    #endregion
}
